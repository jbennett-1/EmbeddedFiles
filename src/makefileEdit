CC := arm-none-eabi-gcc
LD := arm-none-eabi-ld
OBJDUMP := arm-none-eabi-objdump
OBJCOPY := arm-none-eabi-objcopy
CONFIGS := -DCONFIG_HEAP_SIZE=4096
//changes: aarch to arm

CFLAGS := -O2 -ffreestanding -fno-pie -fno-stack-protector -g3 -Wall -mgeneral-regs-only -ffp-contract=off -Iinclude/  $(CONFIGS)


ODIR = obj
SDIR = src

OBJS = \
	boot.o \
	system_init.o \
	kernel_main.o \
	uart.o \
	rprintf.o


OBJ = $(patsubst %,$(ODIR)/%,$(OBJS))

$(ODIR)/%.o: $(SDIR)/%.c
	$(CC) $(CFLAGS) -c -g -o $@ $^

$(ODIR)/%.o: $(SDIR)/%.s
	$(CC) $(CFLAGS) -c -g -o $@ $^


all: bin rootfs.img

bin: $(OBJ)
	$(LD) obj/* -Tkernel.ld -o kernel8.img
	cp kernel8.img kernel8.elf
	$(OBJCOPY) -O binary kernel8.img
	size kernel8.elf

clean:
	rm -f obj/*
	rm -f rootfs.img
	rm -f rootfs.img
	rm -f kernel8.img
	rm -f kernel8.elf
	killall screen

debug:
	screen -S qemu-x86_64 -d -m ./qemu-system-arm -machine lm3s811vb -cpu cortex-m4 -kernel kernel8.img -hda rootfs.img -S -s -serial null -serial stdio -monitor none -nographic -k en-us 
	TERM=xterm arm-none-elf-gdb -x gdb_init_prot_mode.txt

//changes: path, machine, cpu
run:
	./qemu-system-arm -machine lm3s811vb -cpu cortex-m4 -kernel kernel8.img -hda rootfs.img -serial null -serial stdio -monitor none -nographic -k en-us
//add --preconfig?

disassemble:
	$(OBJDUMP) -d kernel8.elf

rootfs.img:
	dd if=/dev/zero of=rootfs.img bs=1M count=16
	mkfs.fat -F16 rootfs.img
	sudo mount rootfs.img /mnt
	sudo mkdir -p /mnt/boot/firmware
	sudo mkdir /mnt/bin
	sudo mkdir /mnt/etc
	sudo umount /mnt
